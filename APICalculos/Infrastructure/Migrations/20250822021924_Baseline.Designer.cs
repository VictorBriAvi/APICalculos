// <auto-generated />
using System;
using APICalculos.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APICalculos.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250822021924_Baseline")]
    partial class Baseline
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("APICalculos.Domain.Entidades.CategoriasServicios", b =>
                {
                    b.Property<int>("CategoriasServiciosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriasServiciosId"), 1L, 1);

                    b.Property<string>("NombreCategoriaServicio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoriasServiciosId");

                    b.ToTable("CategoriasServicios");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("date");

                    b.Property<string>("IdentityDocument")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.DetalleVenta", b =>
                {
                    b.Property<int>("DetalleVentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetalleVentaId"), 1L, 1);

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoDeServicioId")
                        .HasColumnType("int");

                    b.Property<int>("VentaId")
                        .HasColumnType("int");

                    b.HasKey("DetalleVentaId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("TipoDeServicioId");

                    b.HasIndex("VentaId");

                    b.ToTable("DetalleVentas");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("date");

                    b.Property<string>("IdentityDocument")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Gastos", b =>
                {
                    b.Property<int>("GastosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GastosId"), 1L, 1);

                    b.Property<string>("DescripcionGastos")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("FechaGastos")
                        .HasColumnType("date");

                    b.Property<decimal>("PrecioGasto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TipoDeGastosId")
                        .HasColumnType("int");

                    b.HasKey("GastosId");

                    b.HasIndex("TipoDeGastosId");

                    b.ToTable("Gastos");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.HistorialClientes", b =>
                {
                    b.Property<int>("HistorialClientesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistorialClientesId"), 1L, 1);

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionHistorialCliente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaHistorial")
                        .HasColumnType("date");

                    b.Property<string>("NombreDeHistorialCliente")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HistorialClientesId");

                    b.HasIndex("ClienteId");

                    b.ToTable("HistorialClientes");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Producto", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductoId"), 1L, 1);

                    b.Property<string>("CodigoProducto")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("DescripcionProducto")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PrecioProducto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductoId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Rol", b =>
                {
                    b.Property<int>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolId"), 1L, 1);

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RolId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Servicio", b =>
                {
                    b.Property<int>("ServicioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicioId"), 1L, 1);

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaIngresoServicio")
                        .HasColumnType("date");

                    b.Property<int>("TipoDePagoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoDeServicioId")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorServicio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServicioId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("TipoDePagoId");

                    b.HasIndex("TipoDeServicioId");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.TipoDePago", b =>
                {
                    b.Property<int>("TipoDePagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoDePagoId"), 1L, 1);

                    b.Property<string>("NombreTipoDePago")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipoDePagoId");

                    b.ToTable("TipoDePagos");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.TipoDeServicio", b =>
                {
                    b.Property<int>("TipoDeServicioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoDeServicioId"), 1L, 1);

                    b.Property<int>("CategoriasServiciosId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoriasServiciosId1")
                        .HasColumnType("int");

                    b.Property<string>("NombreServicio")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PrecioServicio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TipoDeServicioId");

                    b.HasIndex("CategoriasServiciosId");

                    b.HasIndex("CategoriasServiciosId1");

                    b.ToTable("TipoDeServicios");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.TiposDeGastos", b =>
                {
                    b.Property<int>("TipoDeGastosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoDeGastosId"), 1L, 1);

                    b.Property<string>("NombreTipoDeGastos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipoDeGastosId");

                    b.ToTable("TiposDeGastos");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"), 1L, 1);

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreCompletoUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreDeUsuario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.UsuarioRol", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("UsuarioRoles");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Venta", b =>
                {
                    b.Property<int>("VentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VentaId"), 1L, 1);

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("date");

                    b.Property<int>("TipoDePagoId")
                        .HasColumnType("int");

                    b.HasKey("VentaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("TipoDePagoId");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.DetalleVenta", b =>
                {
                    b.HasOne("APICalculos.Domain.Entidades.Employee", "Empleado")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APICalculos.Domain.Entidades.TipoDeServicio", "TipoDeServicio")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("TipoDeServicioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APICalculos.Domain.Entidades.Venta", "Venta")
                        .WithMany("Detalle")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("TipoDeServicio");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Gastos", b =>
                {
                    b.HasOne("APICalculos.Domain.Entidades.TiposDeGastos", "TiposDeGastos")
                        .WithMany("Gastos")
                        .HasForeignKey("TipoDeGastosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TiposDeGastos");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.HistorialClientes", b =>
                {
                    b.HasOne("APICalculos.Domain.Entidades.Client", "Cliente")
                        .WithMany("HistorialClientes")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Servicio", b =>
                {
                    b.HasOne("APICalculos.Domain.Entidades.Client", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APICalculos.Domain.Entidades.Employee", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APICalculos.Domain.Entidades.TipoDePago", "TipoDePago")
                        .WithMany()
                        .HasForeignKey("TipoDePagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APICalculos.Domain.Entidades.TipoDeServicio", "TipoDeServicio")
                        .WithMany()
                        .HasForeignKey("TipoDeServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Empleado");

                    b.Navigation("TipoDePago");

                    b.Navigation("TipoDeServicio");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.TipoDeServicio", b =>
                {
                    b.HasOne("APICalculos.Domain.Entidades.CategoriasServicios", "CategoriasServicios")
                        .WithMany()
                        .HasForeignKey("CategoriasServiciosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APICalculos.Domain.Entidades.CategoriasServicios", null)
                        .WithMany("TipoDeServicios")
                        .HasForeignKey("CategoriasServiciosId1");

                    b.Navigation("CategoriasServicios");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.UsuarioRol", b =>
                {
                    b.HasOne("APICalculos.Domain.Entidades.Rol", "Rol")
                        .WithMany("RolesUsuario")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APICalculos.Domain.Entidades.Usuario", "Usuario")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Venta", b =>
                {
                    b.HasOne("APICalculos.Domain.Entidades.Client", "Client")
                        .WithMany("Ventas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APICalculos.Domain.Entidades.TipoDePago", "TipoDePago")
                        .WithMany()
                        .HasForeignKey("TipoDePagoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("TipoDePago");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.CategoriasServicios", b =>
                {
                    b.Navigation("TipoDeServicios");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Client", b =>
                {
                    b.Navigation("HistorialClientes");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Employee", b =>
                {
                    b.Navigation("DetalleVentas");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Rol", b =>
                {
                    b.Navigation("RolesUsuario");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.TipoDeServicio", b =>
                {
                    b.Navigation("DetalleVentas");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.TiposDeGastos", b =>
                {
                    b.Navigation("Gastos");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Usuario", b =>
                {
                    b.Navigation("UsuarioRoles");
                });

            modelBuilder.Entity("APICalculos.Domain.Entidades.Venta", b =>
                {
                    b.Navigation("Detalle");
                });
#pragma warning restore 612, 618
        }
    }
}
